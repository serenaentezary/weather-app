{"version":3,"sources":["components/LocationPin/index.jsx","utils/helpers.jsx","components/DailyWeather/index.jsx","components/Weather/index.jsx","constants.jsx","components/Map/index.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["LocationPin","onClick","text","className","icon","locationIcon","isNullOrUndefined","value","DailyWeather","data","map","period","index","name","alt","src","detailedForecast","number","Weather","selectedCity","city","cityLocations","address","lat","lng","Map","location","zoomLevel","useState","chosenCity","setChosenCity","setData","isClosed","setIsClosed","apiKey","setApiKey","getData","lon","axios","get","then","res","properties","forecast","response","periods","catch","err","console","error","handleCityClick","target","citySelector","getURLKey","a","key","useEffect","bootstrapURLKeys","defaultCenter","defaultZoom","pinLocation","googleData","aria-label","buttonLocation","i","buttonClass","type","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ec81af3.chunk.js","sourcesContent":["import React from 'react'\nimport { Icon } from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/map-marker'\n\nconst LocationPin = ({ onClick, text }) => {\n  return (\n    <div className=\"pin\" onClick={() => onClick(text)}>\n      <Icon icon={locationIcon} className=\"pin-icon\" />\n      {text && <p className=\"pin-text\" onClick={() => onClick(text)}>{text}</p>}\n    </div>\n  )\n}\n\nexport default LocationPin;\n","export const isNullOrUndefined = (value) => {\n  return value === null || typeof value === 'undefined';\n}\n","import React from 'react';\nimport { isNullOrUndefined } from '../../utils/helpers'\n\nconst DailyWeather = ({ data }) => {\n  return (\n    <div className=\"daily-weather-container\">\n      {data.map((period, index) => {\n        return (\n          isNullOrUndefined(period) ? '' : <div\n            className=\"weather-time-of-day\"\n            key={period.number ? `weather-${period.number}` : `weather-${index}`}\n          >\n            {period.name && <h3>{period.name}</h3>}\n            {period.icon && <img alt=\"Icon for weather\" className=\"icon\" src={`${period.icon}`} />}\n            {period.detailedForecast && <p className=\"forecast-text\">\n              {period.detailedForecast}\n            </p>}\n          </div>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default DailyWeather;\n","import React from 'react';\nimport DailyWeather from '../DailyWeather';\n\nconst Weather = ({ data, selectedCity }) => {\n  return (\n    <div className=\"weather-bar\">\n      <div className=\"city-header\">\n        {selectedCity.city && <h2>\n          {selectedCity.city}\n        </h2>}\n        {data && <DailyWeather data={data} />}\n      </div>\n    </div>\n  )\n}\n\nexport default Weather;\n","export const cityLocations = [\n  {\n    city: 'Atlanta',\n    data: {\n      address: 'Atlanta, GA',\n      lat: 33.749,\n      lng: -84.387\n    }\n  }, \n  {\n    city: 'Boston',\n    data: {\n      address: 'Boston, MA',\n      lat: 42.358,\n      lng: -71.059\n    }\n  }, \n  { \n    city: 'Chicago',\n    data: {\n      address: 'Chicago, IL',\n      lat: 41.850,\n      lng: -87.650\n    }\n  },\n  {\n    city: 'Phoenix',\n    data: {\n      address: 'Phoenix, AZ',\n      lat: 33.448,\n      lng: -112.074\n    }\n  },\n  {\n    city: 'Portland',\n    data: {\n      address: 'Portland, OR',\n      lat: 45.523,\n      lng: -122.676\n    }\n  }\n];\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios';\nimport GoogleMapReact from 'google-map-react'\nimport LocationPin from '../LocationPin'\nimport Weather from '../Weather';\nimport { cityLocations } from '../../constants'; \nimport { isNullOrUndefined } from '../../utils/helpers';\n\nconst Map = ({ location = cityLocations[2], zoomLevel }) => {\n  const [ chosenCity, setChosenCity ] = useState(cityLocations[2]);\n  const [ data, setData ] = useState([]);\n  const [ isClosed, setIsClosed ] = useState(true);\n  const [ apiKey, setApiKey ] = useState('');\n\n  const handleClose = () => {\n    setIsClosed(true);\n  }\n\n  const handleOpen = () => {\n    setIsClosed(false);\n  }\n\n  const getData = (selectedCity = chosenCity) => {\n    const lat = selectedCity.data.lat;\n    const lon = selectedCity.data.lng;\n\n    axios.get(`https://api.weather.gov/points/${lat},${lon}`)\n      .then(res => {\n        axios.get(res.data.properties.forecast)\n        .then(response => {\n          if (!isNullOrUndefined(response.data.properties)) {\n            setData(response.data.properties.periods);\n          }\n        })\n        .catch(err => console.error(err))\n      })\n      .catch(error => console.error(error));\n  }\n\n  const handleCityClick = (target, citySelector) => {\n    if (target === citySelector.city && citySelector !== chosenCity) {\n      setChosenCity(citySelector);\n    }\n  }\n\n  const getURLKey = async () => {\n    try {\n      const response = await axios.get('http://localhost:3001/api');\n      setApiKey(response.data.key);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  useEffect(() => {\n    getURLKey();\n    getData();\n  }, []);\n\n  useEffect(() => {\n    getData(chosenCity);\n  }, [ chosenCity ]); \n\n  return (\n    <>\n      {apiKey && <div className=\"map\">\n        <div className=\"google-map\">\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: apiKey }}\n            defaultCenter={location.data}\n            defaultZoom={zoomLevel}\n          >\n            {cityLocations.map((pinLocation) => {\n              const googleData = pinLocation.data;\n              \n              return <LocationPin\n                key={pinLocation.city}\n                lat={googleData.lat}\n                lng={googleData.lng}\n                onClick={() => handleCityClick(pinLocation.city, pinLocation)}\n                text={pinLocation.city}\n              />\n            })}\n          </GoogleMapReact>\n        </div>\n      </div>}\n      <button\n          aria-label=\"Click here to see weather results\" \n          className={`reopen is-displayed-${isClosed}`}\n          onClick={handleOpen}\n        >\n          <p className=\"display-results\">Click here to display weather results</p>\n        </button>\n      <div className={`bottom-section is-closed-${isClosed}`}>\n        <button\n          aria-label=\"Click here to close the weather information\"\n          className=\"close\"\n          onClick={handleClose}\n          >\n            X\n        </button>\n        <div className=\"button-selectors\">\n          {cityLocations.map((buttonLocation, i) => {\n            const buttonClass = buttonLocation.city === chosenCity.city ? ' button-selected' : '';\n            return (\n              <button \n                className={`city-button${buttonClass}`}\n                key={`button-${i}`}\n                onClick={() => handleCityClick(buttonLocation.city, buttonLocation)}\n                type=\"button\"\n              >\n                {buttonLocation.city}\n              </button>\n            )\n          })}\n        </div>\n        \n        <Weather\n          data={data}\n          selectedCity={chosenCity} />\n      </div>\n    </>\n  )  \n}\n\nexport default Map;\n","import React from 'react';\nimport './App.css';\nimport Map from './components/Map';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Map zoomLevel={3.5} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}